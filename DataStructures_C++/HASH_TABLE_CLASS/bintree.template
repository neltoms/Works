/*
FILE: bintree.template
TEMPLATE CLASS IMPLEMENTED: binary_tree_node
INVARIANT for the binary_tree_node class
*/

#include <cassert>
#include "Table.h"

namespace ntcage_main_1
{
	template <typename T>
	void tree_clear(binary_tree_node<T>*& root_ptr)
	{
		binary_tree_node<T>* child;
		if(root_ptr != NULL)
		{
			child = root_ptr->left();
			tree_clear(child);
			child = root_ptr->right();
			tree_clear(child);
			delete root_ptr;
			root_ptr = NULL;
		}
	}

	template <typename NodePtr, typename T>
	NodePtr tree_copy(NodePtr root_ptr, NodePtr l_prt, NodePtr r_ptr)
	{
		if(root_ptr == NULL)
			{ return NULL; }
		else
		{
			l_prt = tree_copy(root_ptr->left());
			r_ptr = tree_copy(root_ptr->right());
			return new binary_tree_node<T>(root_ptr->data(), l_prt, r_ptr);
		}
	}

	template <typename T>
	void preorder_print(const binary_tree_node<T>* node_ptr)
	{
		if(node_ptr != NULL)
		{
			std::cout << node_ptr->data() << std::endl;
			preorder_print(node_ptr->left());
			preorder_print(node_ptr->right());
		}
	}

	template <typename T>
	void inorder_print(const binary_tree_node<T>* node_ptr)
	{
		if(node_ptr != NULL)
		{
			inorder_print(node_ptr->left());
			std::cout << node_ptr->data() << std::endl;
			inorder_print(node_ptr->right());
		}
	}

	template <typename T>
	void postoder_print(const binary_tree_node<T>* node_ptr)
	{
		if(node_ptr != NULL)
		postoder_print(node_ptr->left());
		postoder_print(node_ptr->right());
		std::cout << node_ptr->data() << std::endl;
	}

	template <typename T, typename SizeType>
	void print(const binary_tree_node<T>* node_ptr, SizeType depth)
	{
		std::cout << std::setw(4*depth) << ""; // Indentation
		if(node_ptr == NULL)
		{
			std::cout << "[Empty]" << std::endl;
		}
		else if (node_ptr->is_leaf())
		{ 	// A leaf
			std::cout << node_ptr->data();
			std::cout << " [leaf]" << std::endl;
		}
		else
		{ 	// A nonleaf
			std::cout << node_ptr->data() << std::endl;
			print(node_ptr->right(), depth+1);
			print(node_ptr->left(), depth+1);
		}
	}

	template <typename T>
	std::size_t tree_size(const binary_tree_node<T>* node_ptr)
	{
		if(node_ptr == NULL)
			return 0;
		else
			return
			1 + tree_size(node_ptr->left()) + tree_size(node_ptr->right());
	}

	template <typename T>
	void binary_tree_node<T>::insert(T& entry)
	{
		if (entry < this->entry)
		{
			if (entry.left() == NULL)
			{
				entry.left() = new binary_tree_node(entry);
			}
			else
				entry.left()->add(entry);
		}
		else if (entry > this->entry)
		{
			if (entry.right() == NULL)
			{
				entry.right() = new binary_tree_node(entry);
			}
			else
				entry.right()->add(entry);
		}
		
	}

	template <typename T>
	void binary_tree_node<T>::print_tree(binary_tree_node<T>* node_ptr)
	{
		if(node_ptr != NULL)
		{
			print_tree(node_ptr->left());
			std::cout << node_ptr->data() << std::endl;
			print_tree(node_ptr->right());
		}
	}


}
