#include <iostream>
#include <algorithm>
#include <cassert>
#include "dbl_node.h"

namespace ntcage_main_1
{
	template <class Item>
	DblyLinkdSeq<Item>::DblyLinkdSeq()
	{
		head_ptr = NULL;
		tail_ptr = NULL;
		cursor = NULL;
		many_nodes = 0;
	}
		
	template <class Item>
	DblyLinkdSeq<Item>::DblyLinkdSeq(const DblyLinkdSeq<Item>& source)
	{
		list_copy(source.head_ptr, head_ptr, tail_ptr);
		many_nodes = source.many_nodes;
		cursor = NULL;
	}

	template <class Item>
	DblyLinkdSeq<Item>::~DblyLinkdSeq()
	{
		list_clear(head_ptr);
		many_nodes = 0;
	}

	template <class Item>
	void DblyLinkdSeq<Item>::operator=(const DblyLinkdSeq<Item>& source)
	{
		dbl_node<Item>* tail_ptr;

		if(this == &source)
			return;

		list_clear(head_ptr);
		many_nodes = 0;
		list_copy(source.head_ptr, head_ptr, tail_ptr);
		many_nodes = source.many_nodes;
	}

	
	template <class Item>
	void DblyLinkdSeq<Item>::advance()
	{
		assert(is_item());
		
		cursor = cursor->next();
	}
	
	template <class Item>
	void DblyLinkdSeq<Item>::erase_first()
	{
		list_head_remove(head_ptr);
		--many_nodes;
	}

	template <class Item>
	void DblyLinkdSeq<Item>::erase_last()
	{
		dbl_node<Item> *ptr, *prev;
		if (head_ptr == NULL)            // Empty list
			cout << "Can't delete from empty list!" << endl;
			else
			{
				dbl_node<Item> *rm_ptr;
				cursor = head_ptr;
				rm_ptr = cursor; 
				while(cursor != NULL)
				{
					cursor = cursor->link();	
				}
				
				list_remove(rm_ptr->link());
				--many_nodes;
				return;
			}
	}
	
	template <class Item>
	void DblyLinkdSeq<Item>::erase_from(const Item& target)
	{
		dbl_node<Item>* target_ptr;

		target_ptr = list_search(head_ptr, target);
		while(target_ptr != NULL)
		{
			target_ptr->set_data(head_ptr->data());
			target_ptr = target_ptr->link();
			target_ptr = list_search(target_ptr, target);
			list_head_remove(head_ptr);
			--many_nodes;
		}
		delete target_ptr;
		return;
	}
/*
	template <class Item>
	bool DblyLinkdSeq<Item>::erase_occurance(const Item& target)
	{
		dbl_node *target_ptr;
		target_ptr = list_search(head_ptr, target);
		if(target_ptr == NULL)
			return false; // target is not in the DblyLinkdSeq
		target_ptr->set_data(head_ptr->data());
		list_head_remove(head_ptr);
		--many_nodes;
		return true;
		
	}
*/
	template <class Item>
	void DblyLinkdSeq<Item>::insert(const Item& entry)
	{
		dbl_node<Item> *ins_ptr;
		cursor = head_ptr;
		ins_ptr = cursor; 
		while(cursor != NULL)
		{
			cursor = cursor->next();	
		}
		list_insert(ins_ptr, entry);
		++many_nodes;	
	}

	template <class Item>
	void DblyLinkdSeq<Item>::insert_first(const Item& entry)
	{
		list_head_insert(head_ptr, entry);
		++many_nodes;
	}

	template <class Item>
	void DblyLinkdSeq<Item>::insert_at(const Item& position, const Item& entry)
	{
		if (position > size()) 
		{
			std::cout << "Position indicated exceeds list size" << std::endl;
		}
		else if (position == 1) 
		{
			list_head_insert(head_ptr, entry);
		}
		else 
		{
			cursor = head_ptr;
			int i = 1;
			while (i != position) 
			{
				precursor = cursor;
				cursor = cursor->next();
				i++;
			}

			insert(entry);
		/*	dbl_node<Item> *new_item;
			cursor = new_item->next();
			Item& n = new_item->data();
			n = entry;
			new_item = precursor->next();
		*/
		}
	}
	
	
	template <class Item>
	typename DblyLinkdSeq<Item>::size_type DblyLinkdSeq<Item>::count(const Item& target) const
	{
		size_type answer = 0;
		const dbl_node<Item>* cursor = list_search(head_ptr, target);
		while(cursor != NULL)
		{
			++answer;
			cursor = cursor->next();
			cursor= list_search(cursor, target);
		}
		return answer;
	}

	template <class Item>
	Item DblyLinkdSeq<Item>::grab() const
	{
		size_type i;
		const dbl_node<Item>* cursor;

		assert(size() > 0);
		i = (std::rand() % size()) + 1;
		cursor = list_locate(head_ptr, i);
		return cursor->data();
	}
	
	template <class Item>
	std::ostream& operator<<(ostream& output, const DblyLinkdSeq<Item>& list)
		{
			DblyLinkdSeq<Item> *cursor = list.head_ptr;
			while(cursor != NULL)
			{
				output << cursor->data;
				cursor = cursor->link();
			}

			return output;
		}

	template <class Item>
	void DblyLinkdSeq<Item>::operator+=(const DblyLinkdSeq& addend)
	{
		dbl_node<Item> *copy_head_ptr;
		dbl_node<Item> *copy_tail_ptr;

		if(addend.many_nodes > 0)
		{
			list_copy(addend.head_ptr, copy_head_ptr, copy_tail_ptr);
			copy_tail_ptr->set_next(head_ptr);
			head_ptr = copy_head_ptr;
			many_nodes += addend.many_nodes;
		}

	}


	template <class Item>
	DblyLinkdSeq<Item> operator+(const DblyLinkdSeq<Item>& b1, const DblyLinkdSeq<Item>& b2)
	{
		DblyLinkdSeq<Item> answer;

		answer += b1;
		answer += b2;
		return answer;
	
	}
		


}

