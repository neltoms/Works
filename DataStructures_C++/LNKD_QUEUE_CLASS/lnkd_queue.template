/*
FILE: lnkd_queue.template
TEMPLATE CLASSES IMPLEMENTED: lnkd_queue<Item>
This file is includedj in the header file and not compiled separately.
INVARIANT for the Queue Class (Linked-List Version)
	1. The number of items in the queue is stored in the member
	   variable count.
	2. The items in the queue are stored in a linked list, with the
	   front of the queue stored at the head node, and the rear
	   of the queue stored at the final node.
	3. The member variable front_ptr is the head pointer of
	   the linked list of items. For a non-empty queue, the member
	   variable rear_ptr is the tail pointer of the linked list;
	   for an empty list, we don’t care what’s stored in rear_ptr.
*/

#include <cassert>
#include "dbl_node.h"

namespace ntcage_main_1
{
	template <typename Item>
	lnkd_queue<Item>::lnkd_queue()
	{
		count = 0;
		front_ptr = NULL;
	}

	template <typename Item>
	lnkd_queue<Item>::lnkd_queue(const<Item>& source)
	{
		count = source.count;
		list_copy(source.front_ptr, front_ptr, rear_ptr);
	}

	template <typename Item>
	lnkd_queue<Item>::~lnkd_queue()
	{
		list_clear(front_ptr);
	}

	template <typename Item>
	void lnkd_queue<Item>::operator=(const lnkd_queue<Item>& source)
	{
		if(this == &source)
			return;
		list_clear(front_ptr);
		list_copy(source.front_ptr, front_ptr, rear_ptr);
		count = source.count;
	}
	
	template <typename Item>
	Item lnkd_queue<Item>::front() const
	{
		assert(!empty());
		return front_ptr->data();
	}

	template <typename Item>
	void lnkd_queue<Item>::push(const Item& entry)
	{
		if(!empty())
		{
			list_insert(rear_ptr, entry);
			rear_ptr = rear_ptr->link();
		}
		else
		{
			list_head_insert(front_ptr, entry);
			rear_ptr = front_ptr;
		}
		++count;
	}

	void lnkd_queue<Item>::pop()
	{
		assert(!empty());
		list_head_remove(front_ptr);
		--count;
	}
}
